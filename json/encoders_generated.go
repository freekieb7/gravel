package json

import (
	"reflect"
	"strconv"
)

// Example: Demonstrating compile-time encoder generation capabilities
// In practice, this would be generated by the genencoder tool

// Demo struct for encoder generation (move this to main package in real usage)
type DemoStruct struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// Example compile-time generated encoder for DemoStruct
func encodeDemoStruct(v DemoStruct, w writer) error {
	if err := w.WriteByte('{'); err != nil {
		return err
	}
	first := true

	// Field: id
	if !first {
		if err := w.WriteByte(','); err != nil {
			return err
		}
	}
	first = false
	if err := w.WriteString(`"id":`); err != nil {
		return err
	}
	{
		i := int64(v.ID)
		if i < 0 {
			if err := w.WriteByte('-'); err != nil {
				return err
			}
			i = -i
		}
		if i < int64(len(smallInts)) {
			if err := w.WriteString(smallInts[i]); err != nil {
				return err
			}
		} else if i < 100 {
			if err := w.WriteString(twoDigits[i]); err != nil {
				return err
			}
		} else {
			if err := w.WriteString(strconv.FormatInt(int64(v.ID), 10)); err != nil {
				return err
			}
		}
	}

	// Field: name
	if !first {
		if err := w.WriteByte(','); err != nil {
			return err
		}
	}
	first = false
	if err := w.WriteString(`"name":`); err != nil {
		return err
	}
	if err := w.WriteByte('"'); err != nil {
		return err
	}
	if err := escapeStringOptimized(v.Name, w); err != nil {
		return err
	}
	if err := w.WriteByte('"'); err != nil {
		return err
	}

	return w.WriteByte('}')
}

// Register the compile-time generated encoder
func init() {
	RegisterFastEncoder(reflect.TypeOf(DemoStruct{}), func(v reflect.Value, w writer) error {
		return encodeDemoStruct(v.Interface().(DemoStruct), w)
	})
}
